Current Endpoints
GET /menu/:id
	Returns menu information for restaurant with restaurant_id = id
	Inputs: id
	Output:
	{
		dish_name:
		{
			restaurant,
			calories,
			price,
			category,
			picture,
			in_stock
		}
	}

GET /restaurant/:id
	Returns restaurant information and menu information for restaurant with restaurant_id = id
	Inputs: id
	Output:
	{
		restaurant:
		{
			name,
			address,
			phone_number,
			opening,
			closing,
			font,
			primary_color,
			secondary_color,
			tertiary_color,
			logo
		}
		menu:
		{
			dish_name:
			{
				calories,
				price,
				category,
				picture,
				in_stock
			}
		}
	}

GET /orders/:id
	Returns in progress orders for restaurant with restaurant_id = id
	Inputs: id
	Output:
	{
		i:
		{
			order_num,
			item_name,
			quantity,
			order_date,
			table_num
		}	
	}

GET /alexa/:id
	Returns information associated with the alexa with alexa_id = id
	Inputs: id
	Output:
	{
		alexa_id:
		{
			restaurant_id,
			table_num
		}
	}

GET /favorites/:id
	Returns information about a users favorite restaurants
	Inputs: id
	Output:
	{
		0:
		{
			restaurant_id,
			restaurant_name,
			address,
			phone_number,
			opening_time,
			closing_time,
			logo
		}
	}

POST /customer/login
	Logs a customer in and returns a signed JWT and customer information
	Inputs: username and password (in body of request)
	Output:
	{
		token:
		{
			token
		}
		user:
		{
			user_id,
			first_name,
			last_name,
			email
		}
	}

POST /staff/login
	Logs a customer in and returns a signed JWT and customer information
	Inputs: username and password (in body of request)
	Output:
	{
		token:
		{
			token
		}
		staff:
		{
			staff_id,
			restaurant_id,
			first_name,
			last_name,
			contact_num,
			email,
			position
		}
	}

POST /verify
	Verifies a JWT Token
	Output:
	{
		'message': 'Test Passed'
	}

PUT /staff/register
	Creates a new staff member
	Inputs (in body of request): staff_id, restaurant_id, first_name, last_name, contact_num, email, position, password
	Outputs:
		On success:
			{
				token:
				{
					token
				}
				staff:
				{
					staff_id,
					restaurant_id,
					first_name,
					last_name,
					contact_num,
					email,
					position
				}
			}
		If staff_id exists already:
			Error: staff_id already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: staff_id, restaurant_id, first_name, last_name, contact_num, email, position, password


PUT /customer/register
	Creates a new customer
	Inputs (in body of request): customer_id, first_name, last_name, email, password
	Outputs: 
		On success:
			{
				token:
				{
					token
				}
				user:
				{
					user_id,
					first_name,
					last_name,
					email
				}
			}
		If customer_id exists already:
			Error: customer_id already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: customer_id, first_name, last_name, email, password

PUT /menu/add
	Adds a new item to the menu
	Inputs (in body of request): restaurant_id, item_name, calorie_num, category, price
	Outputs:
		On success:
			Successfully added new menu item!
		If item_name and restaurant_id exists already:
			Error: item already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: restaurant_id, item_name, calorie_num, category, price

POST /menu/update
	Updates an existing menu item
	Inputs (in body of request): item_id, restaurant_id, item_name, calorie_num, category, in_stock, price
	Outputs:
		On success:
			Successfully updated menu item!
		If item_name and restaurant_id does not exist already:
			Error: item does not exist
		If any inputs are missing:
			Error: Missing parameter. Required parameters: item_id, restaurant_id, item_name, calorie_num, category, in_stock, price

DELETE /menu/delete
	Deletes a menu item
	Inputs (in body of request): item_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		If JWT is not valid:
			Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			Must be the restaurant manager to delete menu items!
		On success:
			Successfully deleted menu item!
		On error: 
			Error deleting menu item

POST /customer/update
	Updates customer info including customer_id, first_name, last_name, email, password
	Inputs (in body of request): customer_id, first_name, last_name, email, password (optional)
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			{
				token:
				{
					token
				}
				user:
				{
					user_id,
					first_name,
					last_name,
					email
				}
			}
		If JWT is not valid: 
			Must be authorized!
		If JWT is not a customer token:
			Must be signed in as a customer!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: customer_id, first_name, last_name, email, password (optional)
		On error:
			Error updating customer info

POST /orders/update
	Updates the status of an order
	Inputs (in body of request): order_num, order_status
	Outputs:
		On success:
			Successfully updated order!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: order_num, order_status
		If the order doesn't exist:
			Error: order does not exist
		On error:
			Error updating order

PUT /alexa/register
	Registers a new alexa
	Inputs (in body of request):
	Outputs:
		On success:
			Successfully added new alexa!
		If the alexa_id already exists:
			Error: alexa_id already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: alexa_id, restaurant_id, table_num
		On error:
			Error adding new alexa

Added testing user for both /staff/login and /customers/login
	user:password
