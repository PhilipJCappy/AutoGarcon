Current Endpoints

//======================================================================================//
//							ENDPOINTS RELATING TO RESTAURANTS 							//
//======================================================================================//

GET /restaurant/:id
	Returns restaurant information and menu information for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				restaurant:
				{
					name,
					address,
					phone_number,
					opening,
					closing,
					font,
					primary_color,
					secondary_color,
					tertiary_color,
					logo
				}
				menu:
				{
					dish_name:
					{
						calories,
						price,
						category,
						picture,
						in_stock
					}
				}
			}
		If restaurant is invalid:
			Invalid restaurant_id
		On error:
			Error retrieving restaurant information

GET /restaurants
	Returns restaurant_id and restaurant_name of all restaurants
	Inputs: none
	Outputs:
		On success:
			{
				i:
				{
					restaurant_id,
					restaurant_name
				}	
			}
		On error:
			Error retrieving restaurants

POST /restaurant/update
	Updates restaurant information
	Inputs (in body of request): restaurant_id, name, address, phone, opening, closing
	Outputs:
		On success:
			Successfully updated restaurant information!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: restaurant_id, name, address, phone, opening, closing
		If restaurant does not exist:
			Error: restaurant does not exist
		If JWT is not valid:
			Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			Must be the restaurant manager to update restaurant information!
		On error: 
			Error updating restaurant information


//==================================================================================//
//							ENDPOINTS RELATING TO ORDERS 							//
//==================================================================================//

GET /orders/:id
	Returns in progress orders for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i:
				{
					order_num,
					item_name,
					quantity,
					order_date,
					table_num
				}	
			}
		If no in progress orders exist:
			No in progress orders
		On error:
			Error retrieving orders

GET /orders/complete/:id
	Returns complete orders for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i: {
					order_num,
					item_name,
					quantity,
					order_date,
					table_num
				}	
			}
		If no complete orders exist:
			No completed orders
		On error:
			Error retrieving orders

PUT /orders/place
	Places a new order
	Inputs (in body of request): restaurant_id, customer_id, table_num, order
		order format:
			"order": {
				"0": {
					"item": "22",
					"quantity": "5"
				},
				"1": {
					"item": "1",
					"quantity": "5"
				}
			}
	Outputs:
		On success:
			Successfully placed order!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: restaurant_id, customer_id, table_num, order
		On error:
			Error placing order

POST /orders/update
	Updates the status of an order
	Inputs (in body of request): order_num, order_status
		Valid order_status:
			"Complete"
			"In Progress"
			"Pending"
			"Cancelled"
	Outputs:
		On success:
			Successfully updated order!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: order_num, order_status
		If the order doesn't exist:
			Error: order does not exist
		On error:
			Error updating order


//==================================================================================//
//							ENDPOINTS RELATING TO FAVORITES 						//
//==================================================================================//

GET /favorites/:id
	Returns information about a customer's favorite restaurants
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i: {
					restaurant_id,
					restaurant_name,
					address,
					phone_number,
					opening_time,
					closing_time,
					logo
				}
			}
		If user has no favorites:
			User has no favorites
		On error:
			Error retrieving favorites

PUT /favorites/add
	Adds a restaurant to a customer's favorites
	Inputs (in body of request): customer_id, restaurant_id
	Outputs:
		On success:
			Error adding restaurant to favorites
		If any inputs are missing:
			Error: Missing parameter. Required parameters: customer_id, restaurant_id
		On error:
			Succesfully added restaurant to favorites!

DELETE /favorites/delete
	Deletes a restaurant from a customer's favorites
	Inputs (in body of request): customer_id, restaurant_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			Successfully deleted favorite!
		If JWT is not valid or not supplied: 
			Must be authorized!
		If JWT is for a different customer:
			Can't delete other customer's favorites!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: customer_id, restaurant_id
		If favorite does not exist:
			Error: favorite does not exist
		On error:
			Error deleting favorite



//==============================================================================//
//							ENDPOINTS RELATING TO STAFF 						//
//==============================================================================//

POST /staff/login
	Logs a staff member in and returns a signed JWT and staff member's information
	Inputs (in body of request): username and password
	Outputs:
		On success:
			{
				token: {
					token
				}
				staff: {
					staff_id,
					restaurant_id,
					first_name,
					last_name,
					contact_num,
					email,
					position
				}
			}
		On error:
			Error logging in
		If username/password is wrong:
			No user with that username/password

PUT /staff/register
	Creates a new staff member
	Inputs (in body of request): staff_id, restaurant_id, first_name, last_name, contact_num, email, position, password
	Outputs:
		On success:
			{
				token: {
					token
				}
				staff: {
					staff_id,
					restaurant_id,
					first_name,
					last_name,
					contact_num,
					email,
					position
				}
			}
		If staff_id exists already:
			Error: staff_id already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: staff_id, restaurant_id, first_name, last_name, contact_num, email, position, password
		On error:
			Error creating new staff member


//==================================================================================//
//							ENDPOINTS RELATING TO CUSTOMERS 						//
//==================================================================================//

POST /customer/login
	Logs a customer in and returns a signed JWT and customer's information
	Inputs (in body of request): username and password
	Outputs:
		On success:
			{
				token: {
					token
				}
				customer: {
					customer_id,
					first_name,
					last_name,
					email
				}
			}
		On error:
			Error logging in
		If username/password is wrong:
			No customer with that username/password

PUT /customer/register
	Creates a new customer
	Inputs (in body of request): customer_id, first_name, last_name, email, password
	Outputs: 
		On success:
			{
				token: {
					token
				}
				customer: {
					customer_id,
					first_name,
					last_name,
					email
				}
			}
		If customer_id exists already:
			Error: customer_id already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: customer_id, first_name, last_name, email, password
		On error:
			Error creating new customer

POST /customer/update
	Updates customer info including customer_id, first_name, last_name, email, password
	Inputs (in body of request): customer_id, first_name, last_name, email, password (optional)
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			{
				token:
				{
					token
				}
				customer:
				{
					customer_id,
					first_name,
					last_name,
					email
				}
			}
		If JWT is not valid or not supplied: 
			Must be authorized!
		If JWT is not a customer token:
			Must be signed in as a customer!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: customer_id, first_name, last_name, email, password (optional)
		On error:
			Error updating customer info

GET /customer/history/:id
	Retrieves a customer's order history
	Inputs: customer_id
	Outputs:
		On success:
			{
				i =   {
					order_num,
					restaurant_id,
					item_name,
					quantity,
					order_date,
					table_num
				}
			}
		If a user has no history:
			No order history for this customer
		On error:
			Error retrieving order history


//==============================================================================//
//							ENDPOINTS RELATING TO MENU 							//
//==============================================================================//

GET /menu/:id
	Returns menu information for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				dish_name:
				{
					restaurant,
					calories,
					price,
					category,
					picture,
					in_stock
				}
			}
		If restaurant has no menu items:
			This restaurant has no menu items
		On error:
			Error retrieving menu

PUT /menu/add
	Adds a new item to the menu
	Inputs (in body of request): restaurant_id, item_name, calorie_num, category, price
	Outputs:
		On success:
			Successfully added new menu item!
		If item_name and restaurant_id exists already:
			Error: item already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: restaurant_id, item_name, calorie_num, category, price
		On error:
			Error adding new menu item

POST /menu/update
	Updates an existing menu item
	Inputs (in body of request): item_id, restaurant_id, item_name, calorie_num, category, in_stock, price
	Outputs:
		On success:
			Successfully updated menu item!
		If the item does not exist at the restaurant:
			Error: item does not exist
		If any inputs are missing:
			Error: Missing parameter. Required parameters: item_id, restaurant_id, item_name, calorie_num, category, in_stock, price
		On error:
			Error updating menu item

DELETE /menu/delete
	Deletes a menu item
	Inputs (in body of request): item_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			Successfully deleted menu item!
		If menu item does not exist:
			Error: menu item does not exist
		If JWT is not valid:
			Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			Must be the restaurant manager to delete menu items!
		On error: 
			Error deleting menu item


//==================================================================================//
//							ENDPOINTS RELATING TO ALEXAS							//
//==================================================================================//

GET /alexa/:id
	Returns information associated with the alexa with alexa_id = id
	Inputs: alexa_id
	Outputs:
		On success:
			{
				alexa_id: {
					restaurant_id,
					table_num
				}
			}
		On error:
			Error retrieving alexa information
		If alexa doesn't exist:
			This alexa does not exist

PUT /alexa/register
	Registers a new alexa
	Inputs (in body of request): alexa_id, restaurant_id, table_num
	Outputs:
		On success:
			Successfully added new alexa!
		If the alexa_id already exists:
			Error: alexa_id already exists
		If any inputs are missing:
			Error: Missing parameter. Required parameters: alexa_id, restaurant_id, table_num
		On error:
			Error adding new alexa

GET /alexa/pending/:id
	Checks to see if an alexa has a pending order
	Inputs: alexa_id
	Outputs:
		If there is a pending order:
			{
				'message': 'Pending order exists',
				'order_num': order_num
			}
		If there is not a pending order:
			{
				'message': 'No pending order exists'
			}
		On error:
			Error retrieving pending order

PUT /alexa/order/new
	Creates a new pending order for an alexa
	Inputs (in body of request): restaurant_id, alexa_id, table_num
	Outputs:
		On success:
			{
				'message': 'Order created',
				'order_num': order_num
			}
		If any inputs are missing:
			Error: Missing parameter. Required parameters: restaurant_id, alexa_id, table_num
		On error:
			Error placing order

PUT /alexa/order/update
	Updates an existing pending order for an alexa
	Inputs (in body of request): order_num, item, quantity
	Outputs:
		On sucess:
			Successfully updated order!
		If any inputs are missing:
			Error: Missing parameter. Required parameters: order_num, item, quantity
		If order_num does not exist:
			Error: order does not exist or is not pending
		On error:
			Error updating order


//==========================================================================//
//							MISCELLANEOUS ENDPOINTS 						//
//==========================================================================//

POST /verify
	Verifies a JSON Web Token
	Inputs: JWT
	Outputs:
		On success:
			{
				'message': 'Test Passed'
			}
		On error/invalid token:
			Must be authorized!

Added testing user for both /staff/login and /customers/login
	user:password