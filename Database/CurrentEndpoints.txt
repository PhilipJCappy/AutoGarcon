Current Endpoints

//======================================================================================//
//							ENDPOINTS RELATING TO RESTAURANTS 							//
//======================================================================================//

GET /restaurant/:id
	Returns restaurant information and menu information for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				restaurant:
				{
					name,
					address,
					phone_number,
					email,
					opening,
					closing,
					font,
					font_color,
					primary_color,
					secondary_color,
					tertiary_color,
					logo,
					cuisine,
					greeting
				}
				menu:
				{
					dish_name:
					{
						calories,
						price,
						category,
						picture,
						in_stock,
						description
					}
				}
			}
		If restaurant is invalid:
			(409) Invalid restaurant_id
		On error:
			(500) Error retrieving restaurant information

GET /restaurants
	Returns restaurant_id and restaurant_name of all restaurants
	Inputs: none
	Outputs:
		On success:
			{
				i:
				{
					restaurant_id,
					restaurant_name
				}	
			}
		On error:
			(500) Error retrieving restaurants

POST /restaurant/update
	Updates restaurant information
	Inputs (in body of request): restaurant_id, name, address, phone, email, opening, closing, cuisine
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully updated restaurant information!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, name, address, phone, email, opening, closing, cuisine
		If restaurant does not exist:
			(409) Error: restaurant does not exist
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			(401) Must be the restaurant manager to update restaurant information!
		On error: 
			(500) Error updating restaurant information

GET /fonts
	Returns font options
	Inputs: none
	Outputs:
		On success:
			{
				i:
				{
					font_id,
					font_name
				}
			}
		On error:
			(500) Error retrieving fonts

POST /restaurant/customization
	Inputs (in body of request): restaurant_id, primary_color, secondary_color, tertiary_color, font, font_color, greeting, logo (optional)
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully updated restaurant customization!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, primary_color, secondary_color, tertiary_color, font, font_color, greeting, logo (optional)
		If restaurant does not exist:
			(409) Error: restaurant does not exist
		If logo is not an image file:
			(409) Error: invalid image format. Accepted formats: png, jpg, jpeg
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			(400) Must be the restaurant manager to update restaurant information!
		On error: 
			(500) Error updating restaurant customization

PUT /restaurant/new
	Creates a new restaurant
	Inputs (in body of request) : restaurant_name, restaurant_addr, phone_number, email, opening_time, closing_time, cuisine
	Outputs:
		On success:
			(200) Successfully added new resaturant! restaurant_id = <restaurant_id>
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_name, restaurant_addr, phone_number, email, opening_time, closing_time, cuisine
		If restaurant already exists:
			(409) Error: resatuarnt_name already exists
		On error:
			(500) Error adding new restaurant


//==================================================================================//
//							ENDPOINTS RELATING TO ORDERS 							//
//==================================================================================//

GET /orders/:id
	Returns in progress orders for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i:
				{
					order_num,
					item_name,
					quantity,
					order_date,
					table_num,
					customization,
					category
				}	
			}
		If no in progress orders exist:
			(200) No in progress orders
		On error:
			(500) Error retrieving orders

GET /orders/complete/:id
	Returns complete orders for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i: {
					order_num,
					item_name,
					quantity,
					order_date,
					table_num,
					customization,
					category
				}	
			}
		If no complete orders exist:
			(200) No completed orders
		On error:
			(500) Error retrieving orders

PUT /orders/place
	Places a new order
	Inputs (in body of request): restaurant_id, customer_id, table_num, order
		order format:
			"order": {
				"0": {
					"item": "22",
					"quantity": "5",
					"customization": "No pickles, no onion; No ketchup" (Separate customization for each item with a semicolon)
				},
				"1": {
					"item": "1",
					"quantity": "5",
					"customization": "" (Empty string if no customization needed)
				}
			}
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully placed order!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, customer_id, table_num, order
		If JWT is not valid or not supplied: 
			(401) Must be authorized!
		If JWT is for another customer:
			(401) Can't order with a different customer's id!
		On error:
			(500) Error placing order

POST /orders/update
	Updates the status of an order
	Inputs (in body of request): order_num, order_status
		Valid order_status:
			"Complete"
			"In Progress"
			"Pending"
			"Cancelled"
	Outputs:
		On success:
			(200) Successfully updated order!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: order_num, order_status
		If invalid status is entered:
			(409) Error: Invalid status. Valid statuses: Complete, In Progress, Pending, Cancelled
		If the order doesn't exist:
			(409) Error: order does not exist
		On error:
			(500) Error updating order

GET /services/:id
	Returns the service status of all the tables at the restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i: {
					table_num,
					status
				}
			}
		If no tables exist:
			(200) No tables exist
		On error:
			(500) Error retrieving statuses

POST /services/update
	Updates the service status of a table
	Inputs: restaurant_id, table_num, status
	Outputs:
		On success:
			(200) Successfully updated status!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, order_num, order_status
		If the restaurant/table doesn't exist:
			(409) Error: table does not exist at restaurant
		If invalid status is entered:
			(409) Error: Invalid status. Valid statuses: Good, Help, Bill
		On error:
			(500) Error updating status

PUT /services/new
	Adds a new table to the services table
	Inputs (in body of request): restaurant_id, table_num
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully added new table!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, table_num
		If the restaurant doesn't exist:
			(409) Error: restaurant does not exist
		If JWT is not valid or not supplied: 
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant supplied:
			(401) Must be the restaurant manager to add a new table!
		On error:
			(500) Error adding table


//==================================================================================//
//							ENDPOINTS RELATING TO FAVORITES 						//
//==================================================================================//

GET /favorites/:id
	Returns information about a customer's favorite restaurants
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i: {
					restaurant_id,
					restaurant_name,
					address,
					phone_number,
					opening_time,
					closing_time,
					logo
				}
			}
		If customer has no favorites:
			(200) Customer has no favorites
		On error:
			(500) Error retrieving favorites

PUT /favorites/add
	Adds a restaurant to a customer's favorites
	Inputs (in body of request): customer_id, restaurant_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Succesfully added restaurant to favorites!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: customer_id, restaurant_id
		If favorite already exists:
			(409) Favorite already exists
		If JWT is not valid or not supplied: 
			(401) Must be authorized!
		If JWT is for another customer:
			(401) Can't add to other customer's favorites!
		On error:
			(500) Error adding restaurant to favorites

POST /favorites/delete
	Deletes a restaurant from a customer's favorites
	Inputs (in body of request): customer_id, restaurant_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully deleted favorite!
		If JWT is not valid or not supplied: 
			(401) Must be authorized!
		If JWT is for a different customer:
			(401) Can't delete other customer's favorites!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: customer_id, restaurant_id
		If favorite does not exist:
			(409) Error: favorite does not exist
		On error:
			(500) Error deleting favorite



//==============================================================================//
//							ENDPOINTS RELATING TO STAFF 						//
//==============================================================================//

POST /staff/login
	Logs a staff member in and returns a signed JWT and staff member's information
	Inputs (in body of request): username and password
	Outputs:
		On success:
			{
				token: {
					token
				}
				staff: {
					staff_id,
					restaurant_id,
					first_name,
					last_name,
					contact_num,
					email,
					position,
					temp_password
				}
			}
		On error:
			(500) Error logging in
		If username/password is wrong:
			(401) No user with that username/password

PUT /staff/register
	Creates a new staff member
	Inputs (in body of request): staff_id, restaurant_id, first_name, last_name, contact_num, email, position, password
	Outputs:
		On success:
			{
				token: {
					token
				}
				staff: {
					staff_id,
					restaurant_id,
					first_name,
					last_name,
					contact_num,
					email,
					position
				}
			}
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: staff_id, restaurant_id, first_name, last_name, contact_num, email, position, password
		If staff_id and email already exist:
			(409) Error: staff_id and email already exist
		If staff_id already exists:
			(409) Error: staff_id already exists
		If email already exists:
			(409) Error: email already exists
		On error:
			(500) Error creating new staff member

POST /staff/update
	Updates staff info including staff_id, first_name, last_name, contact_num, email
	Inputs (in body of request): staff_id, first_name, last_name, contact_num, email
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			{
				token:
				{
					token
				}
				staff:
				{
					staff_id,
					first_name,
					last_name,
					contact_num,
					email,
					position
				}
			}
		If JWT is not valid or not supplied:
			(401) Must be authorized!
		If JWT is not a staff token:
			(401) Must be signed in as a staff member!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: staff_id, first_name, last_name, contact_num, email, password (optional)
		If staff_id and email already exist:
			(409) Error: staff_id and email already exist
		If staff_id already exists:
			(409) Error: staff_id already exists
		If email already exists:
			(409) Error: email already exists
		On error:
			(500) Error updating staff info

POST /staff/password/forgot
	Resets a forgotten password for a staff member
	Inputs (in body of request) : staff_id
	Outputs:
		On success:
			(200) Sent an email with instructions for resetting password
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: staff_id
		On error:
			(500) Error recovering password

POST /staff/password/update
	Updates a staff member's password
	Inputs (in body of request): staff_id, current_password, new_password
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully updated password!
		If JWT is not valid or not supplied:
			(401) Must be authorized!
		If JWT is not for staff member trying to change password:
			(401) Can't change other people's passwords!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: staff_id, current_password, new_password
		If staff_id/password is wrong:
			(401) No staff member with that username/password
		On error:
			(500) Error updating password

POST /staff/position/update
	Updates a staff member's position
	Inputs (in body of request): staff_id, position
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully updated staff member's position!
		If JWT is not valid or not supplied:
			(401) Must be authorized!
		If JWT is not a manager token:
			(401) Must be signed in as a manager!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: staff_id, position
		If staff_id is not at managers restaurant:
			(409) There is no staff member with that staff_id at your restaurant
		On error:
			(500) Error updating staff member's position


//==================================================================================//
//							ENDPOINTS RELATING TO CUSTOMERS 						//
//==================================================================================//

POST /customer/login
	Logs a customer in and returns a signed JWT and customer's information
	Inputs (in body of request): username and password
	Outputs:
		On success:
			{
				token: {
					token
				}
				customer: {
					customer_id,
					first_name,
					last_name,
					email,
					temp_password,
					image
				}
			}
		On error:
			(500) Error logging in
		If username/password is wrong:
			(401) No customer with that username/password

PUT /customer/register
	Creates a new customer
	Inputs (in body of request): customer_id, first_name, last_name, email, password, image (optional)
	Outputs: 
		On success:
			{
				token: {
					token
				}
				customer: {
					customer_id,
					first_name,
					last_name,
					email,
					image
				}
			}
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: customer_id, first_name, last_name, email, password, image (optional)
		If customer_id and email already exist:
			(409) Error: customer_id and email already exist
		If customer_id already exists:
			(409) Error: customer_id already exists
		If email already exists:
			(409) Error: email already exists
		If image is not an image file:
			(409) Error: invalid image format. Accepted formats: png, jpg, jpeg
		On error:
			(500) Error creating new customer

POST /customer/update
	Updates customer info including customer_id, first_name, last_name, email, image (optional)
	Inputs (in body of request): customer_id, first_name, last_name, email, image (optional)
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			{
				token:
				{
					token
				}
				customer:
				{
					customer_id,
					first_name,
					last_name,
					email,
					image
				}
			}
		If JWT is not valid or not supplied: 
			(401) Must be authorized!
		If JWT is not a customer token:
			(401) Must be signed in as a customer!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: customer_id, first_name, last_name, email, password (optional)
		If customer_id and email already exist:
			(409) Error: customer_id and email already exist
		If customer_id already exists:
			(409) Error: customer_id already exists
		If email already exists:
			(409) Error: email already exists
		If image is not an image file:
			(409) Error: invalid image format. Accepted formats: png, jpg, jpeg
		On error:
			(500) Error updating customer info

GET /customer/history/:id
	Retrieves a customer's order history
	Inputs: customer_id
	Outputs:
		On success:
			{
				i =   {
					order_num,
					restaurant_id,
					restaurant_name,
					font,
					font_color,
					primary_color,
					secondary_color,
					tertiary_color,
					logo,
					item_id,
					item_name,
					price,
					quantity,
					order_date,
					table_num,
					customization
				}
			}
		If a user has no history:
			(200) No order history for this customer
		On error:
			(500) Error retrieving order history

GET /customer/inprogress/:id
	Retrieves a customer's in progress orders
	Inputs: customer_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			{
				i =   {
					order_num,
					restaurant_id,
					item_id,
					item_name,
					price,
					quantity,
					order_date,
					table_num,
					customization
				}
			}
		If a user has no in progress orders:
			(200) This customer has no in progress orders
		If JWT is not valid or not supplied: 
			(401) Must be authorized!
		If JWT is for a different customer:
			(401) Can't retrieve other customer's favorites!
		On error:
			(500) Error retrieving in progress orders

POST /customer/password/forgot
	Resets a forgotten password for a customer
	Inputs (in body of request): customer_id
	Outputs:
		On success:
			(200) Sent an email with instructions for resetting password
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: customer_id
		On error:
			(500) Error recovering password

POST /customer/password/update
	Updates a customer's password
	Inputs (in body of request): customer_id, current_password, new_password
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully updated password!
		If JWT is not valid or not supplied:
			(401) Must be authorized!
		If JWT is not for customer trying to change password:
			(401) Can't change other people's passwords!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: customer_id, current_password, new_password
		If customer_id/password is wrong:
			(401) No customer with that username/password
		On error:
			(500) Error updating password


//==============================================================================//
//							ENDPOINTS RELATING TO MENU 							//
//==============================================================================//

GET /menu/:id
	Returns menu information for restaurant with restaurant_id = id
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				dish_name:
				{
					item_id,
					restaurant,
					calories,
					price,
					category,
					in_stock,
					description,
					allergens
				}
			}
		If restaurant has no menu items:
			(200) This restaurant has no menu items
		On error:
			(500) Error retrieving menu

PUT /menu/add
	Adds a new item to the menu
	Inputs (in body of request): restaurant_id, item_name, calorie_num, category, price, description, image (optional)
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully added new menu item!
		If item_name and restaurant_id exists already:
			(409) Error: item already exists
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, item_name, calorie_num, category, price, description, image (optional)
		If image is not an image file:
			(409) Error: invalid image format. Accepted formats: png, jpg, jpeg
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant of the new item:
			(401) Must be the restaurant manager to add menu items!
		On error:
			(500) Error adding new menu item

POST /menu/update
	Updates an existing menu item
	Inputs: item_id, restaurant_id, item_name, calorie_num, category, in_stock, price, description, image (optional), JWT
	Outputs:
		On success:
			(200) Successfully updated menu item!
		If item does not exist at the restaurant:
			(409) Error: item does not exist
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: item_id, restaurant_id, item_name, calorie_num, category, in_stock, price, description, image (optional)
		If image is not an image file:
			(409) Error: invalid image format. Accepted formats: png, jpg, jpeg
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			(401) Must be the restaurant manager to update menu items!
		On error:
			(500) Error updating menu item

DELETE /menu/delete
	Deletes a menu item
	Inputs (in body of request): item_id
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully deleted menu item!
		If menu item does not exist:
			(409) Error: menu item does not exist
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant of the item:
			(401) Must be the restaurant manager to delete menu items!
		On error: 
			(500) Error deleting menu item

GET /menu/sides/:id
	Returns sides for an item with item_id = id
	Inputs: item_id
	Outputs:
		On success:
			{
				i:
				{
					item_id,
					item_name,
					calories,
					picture,
					in_stock,
					description
				}
			}
		If item has no menu sides:
			(200) This item has no sides
		On error:
			(500) Error retrieving sides

GET /menu/image/:id
	Returns the image for the menu item with item_id = id
	Inputs: item_id
	Outputs:
		On success:
			{
				item_id,
				image
			}
		If the item does not exist:
			(409) This item does not exist
		On error:
			(500) Error retrieving image

PUT /menu/allergens/add
	Adds a new allergen for a menu item
	Inputs (in body of request): item_id, allergen
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully added new allergen!
		If item_id does not exist:
			(409) Error: item does not exist
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: item_id, allergen
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token for the restaurant they are adding an allergen to:
			(401) Must be the restaurant manager to add a new allergen!
		On error:
			(500) Error adding new allergen

GET /categories
	Returns categories
	Inputs: none
	Outputs:
		On success:
			{
				i:
				{
					category_id,
					category_name
				}
			}
		On error:
			(500) Error retrieving categories

PUT /categories/new
	Creates a new category
	Inputs (in body of request): category_name
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully added new category!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: category_name
		If the category already exists:
			(409) Error: category already exists
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token:
			(401) Must be a manager to add a new category!
		On error:
			(500) Error adding new category

POST /categories/remove
	Removes a category
	Inputs (in body of request): category_name
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Successfully removed category!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: category_name
		If the category doesn't exist:
			(409) Error: category doesn't exist
		If JWT is not valid:
			(401) Must be authorized!
		If JWT is not a manager token:
			(401) Must be a manager to remove a category!
		On error:
			(500) Error removing category


//==================================================================================//
//							ENDPOINTS RELATING TO ALEXAS							//
//==================================================================================//

GET /alexa/:id
	Returns information associated with the alexa with alexa_id = id
	Inputs: alexa_id
	Outputs:
		On success:
			{
				alexa_id: {
					restaurant_id,
					table_num,
					greeting
				}
			}
		On error:
			(500) Error retrieving alexa information
		If alexa doesn't exist:
			(200) This alexa does not exist

PUT /alexa/register
	Registers a new alexa
	Inputs (in body of request): alexa_id, restaurant_id, table_num
	Outputs:
		On success:
			(200) Successfully added new alexa!
		If the alexa_id already exists:
			(409) Error: alexa_id already exists
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: alexa_id, restaurant_id, table_num
		On error:
			(500) Error adding new alexa

GET /alexa/pending/:id
	Checks to see if an alexa has a pending order
	Inputs: alexa_id
	Outputs:
		If there is a pending order:
			{
				'message': 'Pending order exists',
				'order_num': order_num
			}
		If there is not a pending order:
			{
				'message': 'No pending order exists'
			}
		On error:
			(500) Error retrieving pending order

PUT /alexa/order/new
	Creates a new pending order for an alexa
	Inputs (in body of request): restaurant_id, alexa_id, table_num
	Outputs:
		On success:
			{
				'message': 'Order created',
				'order_num': order_num
			}
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: restaurant_id, alexa_id, table_num
		On error:
			(500) Error placing order

PUT /alexa/order/update
	Updates an existing pending order for an alexa
	Inputs (in body of request): order_num, item_id, quantity, customization
	Outputs:
		On sucess:
			(200) Successfully updated order!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: order_num, item_id, quantity, customization
		If order_num does not exist:
			(409) Error: order does not exist or is not pending
		On error:
			(500) Error updating order

POST /alexa/order/remove
	Updates the quantity of an item in an alexa order
	Inputs (in body of request): order_num, item_id, quantity (new quantity)
	Outputs:
		On sucess:
			(200) Successfully updated order!
		If any inputs are missing:
			(400) Error: Missing parameter. Required parameters: order_num, item_id, quantity
		If order_num and item_id does not exist:
			(409) Error: item does not exist in the order
		If quantity is negative:
			(409) Quantity can't be negative
		On error:
			(500) Error updating order

GET /alexa/order/:id
	Returns items in a pending alexa order
	Inputs: alexa_id
	Outputs:
		On success:
			{
				i: {
					order_num,
					item_id,
					item_name,
					quantity,
					order_date,
					table_num,
					customization
				}
			}
		If no in progress orders exist:
			(200) No pending order
		On error:
			(500) Error retrieving order


//==========================================================================//
//							MISCELLANEOUS ENDPOINTS 						//
//==========================================================================//

POST /verify
	Verifies a JSON Web Token and checks if it is for a manager
	Inputs (in headers of request): Authorization: Bearer <token>
	Outputs:
		On success:
			(200) Valid manager token
		If JWT is not for a manager:
			(401) Not a manager
		On error/invalid token:
			(401) Must be authorized!


//==========================================================================//
//								TEST ENDPOINTS 								//
//==========================================================================//

GET /orderstats/:id
	Returns stats on which things were ordered the most per category at each restaurant
	Inputs: restaurant_id
	Outputs:
		On success:
			{
				i: {
					restaurant_id
					category
					item_name
					item_id
					total_ordered
				}
			}
		If no items ordered:
			(200) Restaurant has no orders
		On error:
			(500) Error retrieving stats

Added testing user for both /staff/login and /customers/login
	user:password